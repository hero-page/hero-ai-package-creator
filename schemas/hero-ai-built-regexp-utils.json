{"packages":[{"name":"hero-ai-built-regexp-utils","description":"A set of utility functions for working with regular expressions, such as finding and replacing text patterns and validating user input.","functions":[{"function_name":"matchPattern","function_summary":"Finds all matches of a given pattern in a string and returns an array of match objects. Handles extreme cases, such as very long strings and complex patterns. Takes the string and pattern as arguments. Example: matchPattern('abc123xyz', '\\d') would return ['1', '2', '3']."},{"function_name":"replacePattern","function_summary":"Replaces occurrences of a given pattern in a string with a specified replacement value. Handles extreme cases, such as very long strings, complex patterns, and large replace values. Takes the string, pattern, and replacement value as arguments. Example: replacePattern('abc123xyz', '\\d', '*') would return 'abc***xyz'."},{"function_name":"isPatternValid","function_summary":"Checks if a given pattern is a valid regular expression. Handles cases with invalid or malformed regex patterns. Takes the pattern as an argument. Example: isPatternValid('[a-z') would return false."},{"function_name":"isStringMatch","function_summary":"Determines if a given string fully matches a specified pattern. Handles extreme cases like very long strings and complex patterns. Takes the string and pattern as arguments. Example: isStringMatch('abc123', '^abc\\d{3}$') would return true."},{"function_name":"escapeRegExp","function_summary":"Escapes any special characters in a string to make it usable as a pattern in a regular expression. This function handles cases with lots of special characters to escape. Takes the string as an argument. Example: escapeRegExp('a.b$c^d(e)f[g]h{i}j\\k') would return 'a\\.b\\$c\\^d\\(e\\)f\\[g\\]h\\{i\\}j\\\\k'."},{"function_name":"captureGroups","function_summary":"Finds all matches of a given capture group pattern in a string and returns an array of arrays containing the captured groups. Handles extreme cases, such as very long strings and complex patterns with multiple capture groups. Takes the string and pattern as arguments. Example: captureGroups('1a2b3c', '(\\d)([a-z])') would return [['1', 'a'], ['2', 'b'], ['3', 'c']]."}]}]}