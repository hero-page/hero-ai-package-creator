{"packages":[{"name":"hero-date-utils","description":"A collection of functions for handling dates and times, such as formatting, calculating differences, converting to different time zones, and much more.","functions":[{"function_name":"formatDate","function_summary":"Formats a Date object into a string based on the provided format. Example: formatDate(new Date(), 'YYYY-MM-DD') returns '2022-01-31'. Formats supported include: YYYY, MM, DD, HH, mm, ss. Function must handle leading zeros (e.g., 01, 02) for month, day, hour, minute, and second. Also handle both 12-hour and 24-hour time formats (e.g., with or without AM/PM)."},{"function_name":"dateDifference","function_summary":"Calculates the difference between two Date objects and returns the result in the requested time unit, such as seconds, minutes, hours, days, months, or years. Example: dateDifference(new Date('2021-12-27'), new Date('2022-01-27'), 'days') returns 31. Function must return a positive value if the first date is less than the second date."},{"function_name":"convertTimeZone","function_summary":"Takes a Date object, source time zone (in IANA format or GMT offset), and target time zone (in IANA format or GMT offset) and returns a new Date object converted to the target time zone. Example: convertTimeZone(new Date('2021-12-27T12:00:00Z'), 'UTC', 'America/New_York') returns a Date object representing '2021-12-27T07:00:00-05:00'. Handle daylight saving time, and invalid or unsupported time zones."},{"function_name":"isLeapYear","function_summary":"Takes a year as integer input and returns a boolean value indicating if the year is a leap year or not. Example: isLeapYear(2020) returns true. Handle extreme cases, such as negative years or non-integer values."},{"function_name":"addDays","function_summary":"Takes a Date object and a number of days and returns a new Date object with the number of days added. Example: addDays(new Date('2021-12-27'), 31) returns a Date object representing '2022-01-27'. Handle negative values for subtracting days, and fractional values (round to nearest integer)."},{"function_name":"daysInMonth","function_summary":"Takes a year and month as input and returns the number of days in that month. Example: daysInMonth(2022, 2) returns 28. Handle leap years and invalid month inputs."},{"function_name":"getWeekNumber","function_summary":"Takes a Date object and returns the week number (1-53) of that date within the year. Example: getWeekNumber(new Date('2021-12-27')) returns 52. Handle year rollovers, such as Dec 31 being in the first week of the following year."},{"function_name":"isWeekend","function_summary":"Takes a Date object and returns a boolean value indicating if the date is a weekend (Saturday or Sunday). Example: isWeekend(new Date('2022-01-29')) returns true. Ignore non-standard weekends."},{"function_name":"dayOfYear","function_summary":"Takes a Date object and returns the day of the year (1-365/366). Example: dayOfYear(new Date('2021-12-31')) returns 365. Handle leap years."},{"function_name":"compareDates","function_summary":"Takes two Date objects and returns -1 if the first date is less than the second date, 0 if they are equal, and 1 if the first date is greater than the second date. Example: compareDates(new Date('2021-12-27'), new Date('2022-01-27')) returns -1. Ignore time component for comparison by default, but allow an option to include time. Handle invalid Date objects."}]}]}